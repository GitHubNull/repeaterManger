name: 发布增强重放插件

on:
  push:
    tags:
      - 'v*' # 触发标签格式为 v开头，例如 v1.0.0, v1.2.3-beta 等
  workflow_dispatch: # 允许手动触发

# 明确定义权限
permissions:
  contents: write # 为了创建release，需要写入权限
  packages: write # 如果需要上传包

jobs:
  build-and-release:
    name: 构建并发布插件
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取完整历史以便提取提交信息
      
      - name: 设置 JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: 检查标签格式
        id: check-tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ "$TAG" == "" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发时，如果没有标签，使用日期作为标签
            TAG="v$(date +'%Y.%m.%d')-manual"
            echo "使用自动生成的标签: $TAG"
          fi
          
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "版本标签有效: $TAG"
            VERSION=${TAG#v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "错误: 标签 '$TAG' 不符合版本格式要求 (v主版本.次版本.修订版本)"
            exit 1
          fi
      
      - name: 使用 Maven 构建
        id: build
        run: |
          echo "开始构建项目..."
          mvn clean package -B
          
          # 检查构建结果
          if [ $? -ne 0 ]; then
            echo "Maven 构建失败"
            exit 1
          fi
          
          # 找到生成的 jar 文件
          JAR_PATH=$(find target/releases/ -name "enhanced-repeater-*.jar" | head -n 1)
          if [ -z "$JAR_PATH" ]; then
            echo "找不到构建后的 jar 文件"
            exit 1
          fi
          
          # 输出 jar 路径供后续步骤使用
          echo "jar_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "构建成功: $JAR_PATH"
          
          # 创建一个不带时间戳的文件副本，使文件名更规范
          RELEASE_JAR="target/releases/enhanced-repeater-${{ steps.check-tag.outputs.version }}.jar"
          cp "$JAR_PATH" "$RELEASE_JAR"
          echo "release_jar=$RELEASE_JAR" >> $GITHUB_OUTPUT
      
      - name: 提取提交信息作为发布说明
        id: release-notes
        run: |
          # 尝试获取最近的两个标签
          CURRENT_TAG="${{ steps.check-tag.outputs.tag }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
          
          # 如果有前一个标签，则获取之间的提交信息
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "获取 $PREVIOUS_TAG 至 $CURRENT_TAG 之间的提交信息"
            # 提取提交信息，排除合并提交，并格式化
            CHANGELOG=$(git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"* %s (%h)" --no-merges)
          else
            echo "没有找到前一个标签，获取当前标签之前的所有提交"
            # 如果没有前一个标签，则获取所有提交
            CHANGELOG=$(git log $CURRENT_TAG --pretty=format:"* %s (%h)" --no-merges | head -n 50)
          fi
          
          # 检查是否有变更记录
          if [ -z "$CHANGELOG" ]; then
            echo "未找到有效的提交信息，使用默认发布说明"
            CHANGELOG="Enhanced Repeater Manager 版本 ${{ steps.check-tag.outputs.version }}"
          fi
          
          # 将标题和说明写入文件
          echo "# Enhanced Repeater Manager ${{ steps.check-tag.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "## 变更记录" >> release_notes.md
          echo "" >> release_notes.md
          echo "$CHANGELOG" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 安装方法" >> release_notes.md
          echo "" >> release_notes.md
          echo "1. 下载 jar 文件" >> release_notes.md
          echo "2. 在 Burp Suite 中转到 Extender > Extensions" >> release_notes.md
          echo "3. 点击 Add 按钮" >> release_notes.md
          echo "4. 选择下载的 jar 文件" >> release_notes.md
          echo "5. 点击 Next 完成安装" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 文件说明" >> release_notes.md
          echo "" >> release_notes.md
          echo "- \`enhanced-repeater-${{ steps.check-tag.outputs.version }}.jar\` - 主版本，可直接安装使用" >> release_notes.md
          
          echo "发布说明已保存到 release_notes.md"
          cat release_notes.md
      
      # 使用GitHub CLI创建发布，通常权限更可靠
      - name: 安装 GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
      
      - name: 创建 GitHub Release (使用 GitHub CLI)
        id: create-release-cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 检查是否为预发布版本
          if [[ ${{ steps.check-tag.outputs.tag }} == *"-"* ]]; then
            PRERELEASE="--prerelease"
          else
            PRERELEASE=""
          fi
          
          # 使用GitHub CLI创建发布
          echo "正在创建GitHub Release..."
          RELEASE_URL=$(gh release create ${{ steps.check-tag.outputs.tag }} \
            --title "Enhanced Repeater Manager ${{ steps.check-tag.outputs.version }}" \
            --notes-file release_notes.md \
            $PRERELEASE \
            "${{ steps.build.outputs.release_jar }}" \
            "${{ steps.build.outputs.jar_path }}")
          
          if [ $? -eq 0 ]; then
            echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
            echo "✅ 发布成功: $RELEASE_URL"
          else
            echo "❌ 发布失败"
            exit 1
          fi
      
      - name: 清理构建文件
        if: always()
        run: |
          echo "清理临时文件..."
          rm -f release_notes.md || true 

# 备用方案：如果需要使用PAT令牌
# 如果上面的方法仍然失败，请取消下面的注释，并在仓库设置中添加名为CUSTOM_GITHUB_TOKEN的PAT令牌
# 这个PAT令牌需要有repo权限

#  create-release-with-pat:
#    name: 使用PAT令牌创建发布
#    needs: build-and-release
#    runs-on: ubuntu-latest
#    if: ${{ failure() && needs.build-and-release.result == 'failure' }}
#    steps:
#      - name: 检出代码
#        uses: actions/checkout@v3
#      
#      - name: 创建 GitHub Release (使用PAT)
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ needs.build-and-release.outputs.tag }}
#          name: Enhanced Repeater Manager ${{ needs.build-and-release.outputs.version }}
#          body_path: release_notes.md
#          draft: false
#          prerelease: ${{ contains(needs.build-and-release.outputs.tag, '-') }}
#          files: |
#            ${{ needs.build-and-release.outputs.release_jar }}
#            ${{ needs.build-and-release.outputs.jar_path }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }} 